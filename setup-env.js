#!/usr/bin/env node

/**
 * Setup script to help configure environment variables for Portfolyze
 * Run with: node setup-env.js
 */

const fs = require('fs');
const path = require('path');
const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

const envPath = path.join(process.cwd(), '.env');

console.log('üöÄ Portfolyze Environment Setup');
console.log('================================\n');

// Check if .env already exists
if (fs.existsSync(envPath)) {
  console.log('‚ö†Ô∏è  .env file already exists!');
  rl.question('Do you want to overwrite it? (y/N): ', (answer) => {
    if (answer.toLowerCase() !== 'y' && answer.toLowerCase() !== 'yes') {
      console.log('Setup cancelled.');
      rl.close();
      return;
    }
    createEnvFile();
  });
} else {
  createEnvFile();
}

function createEnvFile() {
  console.log('\nüìù Setting up environment variables...\n');
  
  rl.question('Enter your Apps Script NAV API URL (or press Enter to skip): ', (navApiUrl) => {
    rl.question('Enter your Firebase API Key (or press Enter to skip): ', (firebaseApiKey) => {
      rl.question('Enter your Firebase Auth Domain (or press Enter to skip): ', (firebaseAuthDomain) => {
        rl.question('Enter your Firebase Project ID (or press Enter to skip): ', (firebaseProjectId) => {
          rl.question('Enter your Firebase Storage Bucket (or press Enter to skip): ', (firebaseStorageBucket) => {
            rl.question('Enter your Firebase Messaging Sender ID (or press Enter to skip): ', (firebaseMessagingSenderId) => {
              rl.question('Enter your Firebase App ID (or press Enter to skip): ', (firebaseAppId) => {
                rl.question('Enter your Firebase Measurement ID (or press Enter to skip): ', (firebaseMeasurementId) => {
                  rl.question('Use Firebase Emulator in development? (y/N): ', (useEmulator) => {
                    createEnvContent(navApiUrl, firebaseApiKey, firebaseAuthDomain, firebaseProjectId, 
                                   firebaseStorageBucket, firebaseMessagingSenderId, firebaseAppId, 
                                   firebaseMeasurementId, useEmulator);
                  });
                });
              });
            });
          });
        });
      });
    });
  });
}

function createEnvContent(navApiUrl, firebaseApiKey, firebaseAuthDomain, firebaseProjectId, 
                         firebaseStorageBucket, firebaseMessagingSenderId, firebaseAppId, 
                         firebaseMeasurementId, useEmulator) {
  
  let envContent = '# Environment variables for Portfolyze\n';
  envContent += '# Generated by setup-env.js\n\n';
  
  if (navApiUrl && navApiUrl.trim()) {
    envContent += `# NAV API Base URL\n`;
    envContent += `VITE_NAV_API_BASE=${navApiUrl.trim()}\n\n`;
  } else {
    envContent += `# NAV API Base URL - Replace with your actual Apps Script deployment URL\n`;
    envContent += `# VITE_NAV_API_BASE=https://script.google.com/macros/s/YOUR_SCRIPT_ID/exec\n\n`;
  }
  
  if (firebaseApiKey && firebaseApiKey.trim()) {
    envContent += `# Firebase Configuration\n`;
    envContent += `VITE_FIREBASE_API_KEY=${firebaseApiKey.trim()}\n`;
    envContent += `VITE_FIREBASE_AUTH_DOMAIN=${firebaseAuthDomain.trim() || 'your_project.firebaseapp.com'}\n`;
    envContent += `VITE_FIREBASE_PROJECT_ID=${firebaseProjectId.trim() || 'your_project_id'}\n`;
    envContent += `VITE_FIREBASE_STORAGE_BUCKET=${firebaseStorageBucket.trim() || 'your_project.appspot.com'}\n`;
    envContent += `VITE_FIREBASE_MESSAGING_SENDER_ID=${firebaseMessagingSenderId.trim() || '123456789'}\n`;
    envContent += `VITE_FIREBASE_APP_ID=${firebaseAppId.trim() || '1:123456789:web:abcdef123456'}\n`;
    envContent += `VITE_FIREBASE_MEASUREMENT_ID=${firebaseMeasurementId.trim() || 'G-XXXXXXXXXX'}\n`;
    envContent += `VITE_USE_FIREBASE_EMULATOR=${useEmulator.toLowerCase() === 'y' || useEmulator.toLowerCase() === 'yes' ? 'true' : 'false'}\n`;
  } else {
    envContent += `# Firebase Configuration (uncomment and fill in your values)\n`;
    envContent += `# VITE_FIREBASE_API_KEY=your_api_key\n`;
    envContent += `# VITE_FIREBASE_AUTH_DOMAIN=your_project.firebaseapp.com\n`;
    envContent += `# VITE_FIREBASE_PROJECT_ID=your_project_id\n`;
    envContent += `# VITE_FIREBASE_STORAGE_BUCKET=your_project.appspot.com\n`;
    envContent += `# VITE_FIREBASE_MESSAGING_SENDER_ID=123456789\n`;
    envContent += `# VITE_FIREBASE_APP_ID=1:123456789:web:abcdef123456\n`;
    envContent += `# VITE_FIREBASE_MEASUREMENT_ID=G-XXXXXXXXXX\n`;
    envContent += `# VITE_USE_FIREBASE_EMULATOR=false\n`;
  }
  
  try {
    fs.writeFileSync(envPath, envContent);
    console.log('\n‚úÖ .env file created successfully!');
    console.log(`üìÅ Location: ${envPath}`);
    
    if (!navApiUrl || !navApiUrl.trim()) {
      console.log('\n‚ö†Ô∏è  NAV API URL not provided. The app will use mock data.');
      console.log('   To fix this, edit the .env file and add your Apps Script URL.');
    }
    
    if (!firebaseApiKey || !firebaseApiKey.trim()) {
      console.log('\n‚ö†Ô∏è  Firebase configuration not provided. Authentication may not work.');
      console.log('   To fix this, edit the .env file and add your Firebase configuration.');
    }
    
    console.log('\nüîÑ Please restart your development server for changes to take effect.');
    console.log('   Run: npm run dev');
    
  } catch (error) {
    console.error('\n‚ùå Error creating .env file:', error.message);
  }
  
  rl.close();
}
